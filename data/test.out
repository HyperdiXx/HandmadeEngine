
#include "handmade.h"


internal void
GameOutputSound(game_sound_output_buffer *SoundBuffer)
{
 for(int SampleIndex = 0;
	   SampleIndex < SoundBuffer->SampleCount;
	   ++SampleIndex)
	   {
	     local_var real32 tSine;
	     int16 ToneVolume = 3000;
	     int ToneHz = 256;
	     int WavePeriod = SoundBuffer-> SamplesPerSecond / ToneHz;
	     
	     int16 *SampleOut = SoundBuffer->Samples;
	     //real32 t = 2.0f * Pi32 * (real32)SoundOutput->RunningSampleIndex / (real32)SoundOutput->WavePeriod;
	     real32 SineValue = sinf(tSine);
	     int16 SampleValue = (int16)(SineValue * ToneVolume);
	     *SampleOut++ = SampleValue;
	     *SampleOut++ = SampleValue;

	     tSine += 2.0f * Pi32 * 1.0f/(real32)WavePeriod; 
	   }
}


internal void RenderGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset)
{
  int Width = Buffer->Width;
  int Height = Buffer->Height;

  uint8 *Row = (uint8 *)Buffer->BitmapMemory ;
  for(int Y = 0; Y < Height; ++Y)
  {
    uint32 *Pixel = (uint32 *)Row; 
    for(int X = 0; X < Width; ++X)
    {
      uint8 Blue = (uint8)(X + XOffset);
      uint8 Green = (uint8)(Y + YOffset);   
      
      *Pixel++ = ((Green << 8) | Blue);
    }

    Row += Buffer->Pitch;
  } 
}

internal game_state*
GameStartUp()
{
  game_state *GameState = new game_state;
  if(GameState)
  {
    GameState->BlueOffset = 0;
    GameState->GreenOffset = 0;
    GameState->ToneHz = 256;
  }

  return (GameState);
}

internal void
GameShutDown(game_state *gs)
{
  
  delete gs;
}

internal void GameUpdateAndRender(game_memory *Memory,
				  game_input *Input, game_offscreen_buffer *Buffer,
				  game_sound_output_buffer *SoundBuffer)
{
  Assert(sizeof(game_state) <= Memory->PermanentStorageSize);
  game_state *GameState = (game_state *)Memory->PermanentStorage;

  char *Filename = __FILE__;

  debug_read_file_res File = DEBUGPlatformReadEntireFile(Filename);

  if(File.Contents)
  {
    DEBUGPlatformWriteEntireFile("test.out", File.ContentsSize, File.Contents);
    DEBUGPlatformFreeFileMemory(File.Contents);
  }
  
  if(!Memory->IsInitialized)
  {
    GameState->ToneHz = 256;
    GameState->BlueOffset = 0;
    GameState->GreenOffset = 0;
    //
    Memory->IsInitialized = true;
  }
  
  game_controller_input *Input0 = &Input->Controlls[0];
  if(Input0->IsAnalog)
  {   
      GameState->ToneHz = 256 - (int)(128.0f * (Input0->EndY));
      GameState->BlueOffset += (int)(4.0f * (Input0->EndX));
  }
  else
  {


  }
  
  if(Input0->Down.IsEnd)
  {
    GameState->GreenOffset += 1;
  }

  GameOutputSound(SoundBuffer);
  RenderGradient(Buffer, GameState->BlueOffset, GameState->GreenOffset); 
}
