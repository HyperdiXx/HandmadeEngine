
#include "handmade.h"


internal game_state*
GameStartUp(void)
{
	game_state *GameState = new game_state;
	if (GameState)
	{
		GameState->GreenOffset = 0;
		GameState->BlueOffset = 0;
		GameState->ToneHz = 256;
	}
	return(GameState);
}


internal game_state*
GameShutdown(game_state *GameState)
{
	delete GameState;
}

internal void
GameOutputSound(game_state* GameState, game_sound_output_buffer *SoundBuffer, int ToneHz)
{
#if 0
	int16 ToneVolume = 3000;
	int WavePeriod = SoundBuffer->SamplesPerSecond / ToneHz;

	int16 *SampleOut = SoundBuffer->Samples;

	for (int SampleIndex = 0;
		SampleIndex < SoundBuffer->SampleCount;
		++SampleIndex)
	{	
		real32 SineValue = sinf(GameState->tSine);
		int16 SampleValue = (int16)(SineValue * ToneVolume);
		*SampleOut++ = SampleValue;
		*SampleOut++ = SampleValue;

		GameState->tSine += 2.0f * Pi32 * 1.0f / (real32)WavePeriod;
        if (GameState->tSine > 2.0f * Pi32)
        {
            GameState->tSine -= 2.0f * Pi32;
        }
	}
#endif
}

internal void RenderGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset)
{
	int Width = Buffer->Width;
	int Height = Buffer->Height;

    uint8 BlueDarkConst = (uint8)64;

	uint8 *Row = (uint8 *)Buffer->BitmapMemory;
	for (int Y = 0; Y < Height; ++Y)
	{
		uint32 *Pixel = (uint32 *)Row;
		for (int X = 0; X < Width; ++X)
		{
			//uint8 Blue = (uint8)(X + XOffset);
			uint8 Green = (uint8)(Y + YOffset);
            

			*Pixel++ = (BlueDarkConst);
		}

		Row += Buffer->Pitch;
	}
}

internal void
RenderPlayer(game_offscreen_buffer* Buffer, int PlayerX, int PlayerY, uint32 Color)
{
    uint8 *EndofBuffer = (uint8 *)Buffer->BitmapMemory + 
        Buffer->Pitch *
        Buffer->Height;
    int Top = PlayerY;
    int Bottom = PlayerY + 10;

    for (int x = PlayerX;
        x < PlayerX + 10;
        ++x)
    {
        uint8 *PlayerImage = ((uint8*)Buffer->BitmapMemory + 
                            x * Buffer->BytesPerPixel +
                            Top * Buffer->Pitch);

            for (int y = Top;
                y < Bottom;
                ++y)
            {
                if (PlayerImage >= Buffer->BitmapMemory &&
                    (PlayerImage < EndofBuffer))
                {
                    *(uint32 *)PlayerImage = Color;
                }
                
                PlayerImage += Buffer->Pitch;
            }
    }

}

internal int32
RoundValue(real32 Val)
{
    int32 Res = (int32)(Val + 0.5f);

    return (Res);
}

internal void
RenderRectangle(game_offscreen_buffer* Buffer, real32 MinXIn, real32 MinYIn, real32 MaxXIn, real32 MaxYIn)
{
    int32 MinY = RoundValue(MinYIn);
    int32 MaxY = RoundValue(MaxYIn);
    int32 MinX = RoundValue(MinXIn);
    int32 MaxX = RoundValue(MaxXIn);

    if (MinY < 0)
    {
        MinY = 0;
    }
    if (MinX < 0)
    {
        MinX = 0;
    }
    if (MaxX > Buffer->Width)
    {
        MinX = Buffer->Width;
    }
    if (MaxY > Buffer->Height)
    {
        MinY = Buffer->Height;
    }

    uint32 Color = 0xFFFFFFFF;

    uint8 *Row = ((uint8 *)Buffer->BitmapMemory + MinX * Buffer->BytesPerPixel + MinY * Buffer->Pitch);

    // : Cache friendly

    for (int y = MinY;
        y < MaxY;
        ++y)
    {
        uint32 *Pixel = (uint32 *)Row;
        for (int x = MinX;
            x < MaxX;
            ++x)
        {
            *Pixel++ = Color;
        }
        Row += Buffer->Pitch;
    }
    
}



extern "C" GAME_UPDATE_AND_RENDER(GameUpdateAndRender)
{
	Assert((&Input->Controlls[0].Terminator - &Input->Controlls[0].Buttons[0]) ==
		(ArrayCount(Input->Controlls[0].Buttons)));
	Assert(sizeof(game_state) <= Memory->PermanentStorageSize);

	game_state *GameState = (game_state *)Memory->PermanentStorage;

	if (!Memory->IsInitialized)
	{
		char *Filename = __FILE__;

		debug_read_file_res File = Memory->DEBUGPlatrformReadEntireFile(Thread, Filename);

		if (File.Contents)
		{
			Memory->DEBUGPlatformWriteEntireFile(Thread, "V:/handmade/data/file.out", File.ContentsSize, File.Contents);
			Memory->DEBUGPlatformFreeFileMemory(Thread, File.Contents);
		}


		GameState->ToneHz = 512;
        GameState->tSine = 0.0f;
        GameState->PlayerX = 100;
        GameState->PlayerY = 100;

		Memory->IsInitialized = true;
	}

	for (int ControllerIndex = 0;
		ControllerIndex < ArrayCount(Input->Controlls);
		++ControllerIndex)
	{
		game_controller_input *Controllers = GetController(Input, ControllerIndex);
		if (Controllers->IsAnalog)
		{
			//GameState->ToneHz = 512 + (int)(128.0f * (Controllers->StickAverageY));
			//GameState->BlueOffset += (int)(4.0f * (Controllers->StickAverageX));
		}
		else
		{
			/*if (Controllers->MoveLeft.IsEnd)
			{
				GameState->BlueOffset -= 1;
			}
			if (Controllers->MoveRight.IsEnd)
			{
				GameState->BlueOffset += 1;
			}*/

		}
		
        /*GameState->PlayerX += (int)(8.0f * (Controllers->StickAverageX));
        GameState->PlayerY -= (int)(8.0f * (Controllers->StickAverageY));
        if (GameState->tJmp > 0)
        {
            GameState->PlayerY += (int)(10.0f * sinf(0.5f * Pi32 * GameState->tJmp));
        }
        if (Controllers->ActionDown.IsEnd)
        {
            GameState->tJmp = 4.0;
        }

        GameState->tJmp -= 0.033f;*/
	}

    //RenderGradient(Buffer, GameState->BlueOffset, GameState->GreenOffset);
    //RenderPlayer(Buffer, GameState->PlayerX, GameState->PlayerY, 0xFFFFFFFF);

    //RenderPlayer(Buffer, Input->MouseX, Input->MouseY, 0xFFFFFFFF);

    /*if (Input->Mouse[0].IsEnd)
    {
        RenderPlayer(Buffer, 20, 20, 0xFFFF0000);
    }*/

    RenderRectangle(Buffer, 10.0f, 10.0f, 30.0f, 30.0f);

}


extern "C" GAME_GET_SOUND_SAMPLES(GameGetSoundSamples)
{
  game_state *GameState = (game_state *)Memory->PermanentStorage;
  GameOutputSound(GameState, SoundBuffer, GameState->ToneHz);

}

#if HANDMADE_WIN32
#include <windows.h>
BOOL WINAPI DllMain(
    _In_ HINSTANCE hInstDll,
    _In_ DWORD dw,
    _In_ LPVOID lpRes)
{
    
    return (TRUE);
}
#endif